{
  "page_title": "Unity Localization Tool Documentation",
  "toc_title": "Table of Contents",
  "toc_search_placeholder": "Search documentation...",
  "nav_introduction": "1. Introduction",
  "nav_quick_start": "2. Quick Start",
  "nav_components": "3. Core Components",
  "nav_loc_tool_window": "4. \"Localization Tool\" Window",
  "nav_translation_editor": "5. Translation Editor",
  "nav_usage_examples": "6. Usage Examples",
  "nav_important_notes": "7. Important Notes",
  "nav_extending": "8. Extending Functionality",
  "nav_faq": "9. FAQ & Troubleshooting",
  "nav_key_features": "Key Features",
  "nav_installation": "2.1. Installation",
  "nav_initial_setup": "2.2. Initial Setup",
  "nav_localizedtext": "3.1. LocalizedText",
  "nav_localizedasset": "3.2. LocalizedAsset",
  "nav_localizedprefab": "3.3. LocalizedPrefab",
  "nav_uitklocalization": "3.4. UITKLocalization",
  "nav_localizeddropdown": "3.5. LocalizedDropdown",
  "nav_localizedbehaviour": "3.6. LocalizedBehaviour",
  "nav_context_menu": "3.7. Context Menu",
  "nav_in_editor_preview": "4.1. In-Editor Preview",
  "nav_tab_settings": "4.2. \"Settings\" Tab",
  "nav_tab_content": "4.3. \"Content\" Tab",
  "nav_tab_actions": "4.4. \"Actions\" Tab",
  "nav_tab_assets": "4.5. \"Assets\" Tab",
  "nav_tab_report": "4.6. \"Report\" Tab",
  "nav_example_components": "6.1. Ready-made Components",
  "nav_example_attribute": "6.2. [LocalizableField] Attribute",
  "nav_example_function": "6.3. _() Function",
  "nav_example_plurals": "6.4. Plurals & Gender",
  "nav_custom_parser": "8.1. Creating a Parser",
  "nav_faq_installation": "9.1. Installation & Quick Start",
  "nav_faq_components": "9.2. Core Components",
  "nav_faq_window": "9.3. \"Localization Tool\" Window",
  "nav_faq_window_actions": "9.3. \"Localization Tool\" Window - \"Actions\" Tab",
  "nav_faq_window_assets": "9.3. \"Localization Tool\" Window - \"Assets\" Tab",
  "nav_faq_window_report": "9.3. \"Localization Tool\" Window - \"Report\" Tab",
  "nav_faq_editor": "9.4. Translation Editor",
  "nav_faq_examples": "9.5. Usage Examples & Code",
  "nav_faq_notes": "9.6. Important Nuances & Warnings",
  "nav_faq_extending": "9.7. Extending Functionality",
  "h1_introduction": "Introduction",
  "p_intro_1": "This tool is a comprehensive solution for localizing games and applications in Unity. It automates the process of collecting text and assets, managing translations through a powerful interface, integrating with machine translation services, and dynamically updating localized content in the game.",
  "h2_key_features": "Key Features",
  "li_feature_1": "<strong>Advanced Parsing:</strong> Automatic scanning of scenes, prefabs, UI Toolkit (UXML), and C# scripts, including fields marked with the <code>[LocalizableField]</code> attribute, as well as nested classes and lists.",
  "li_feature_2": "<strong>Localization of Any Asset:</strong> Manage sprites, audio, prefabs, materials, etc.",
  "li_feature_3": "<strong>Powerful Translation Editor:</strong> A centralized interface with auto-saving, full Undo/Redo support, and smart key grouping.",
  "li_feature_4": "<strong>Machine Translation:</strong> Integration with DeepL, Google Translate, and Microsoft Translator with flexible settings (batch size, number of retries) for each service.",
  "li_feature_5": "<strong>Flexible Import/Export:</strong> Support for CSV, XML, YAML, XLIFF, and direct import from Google Sheets.",
  "li_feature_6": "<strong>In-Editor Live Preview:</strong> Preview any language without running the game.",
  "li_feature_7": "<strong>Plural & Gender Support:</strong> Correct handling of plural forms (with rules for Slavic, Arabic, and other languages) and gender.",
  "li_feature_8": "<strong>Full RTL Support:</strong> Correct display of right-to-left languages.",
  "li_feature_9": "<strong>Live Updates:</strong> Load up-to-date translations from a remote server at game start.",
  "li_feature_10": "<strong>Backup Manager:</strong> A built-in tool for creating and restoring backups.",
  "h1_quick_start": "Quick Start and Setup",
  "h2_installation": "2.1. Installation",
  "li_install_1": "Copy the asset into your Unity project folder.",
  "li_install_2": "The tool will automatically check for necessary dependencies. Confirm the installation in the dialog box that appears.",
  "li_install_3": "Required dependencies (<code>Newtonsoft Json</code>, <code>Editor Coroutines</code>) are necessary for basic functionality.",
  "li_install_4": "Optional dependencies (<code>Arabic Support</code>, <code>CsvHelper</code>, <code>YamlDotNet</code>) enable additional features.",
  "li_install_5": "Click <strong>Install Selected</strong> to install the recommended packages.",
  "li_install_6": "After installation, open the main tool window via the <strong>Tools -> Localization Tool</strong> menu.",
  "h2_initial_setup": "2.2. Initial Setup",
  "li_setup_1": "<strong>Create Settings:</strong> On first open, the tool will create a <code>LocalizationSettings.asset</code> file in the <code>Assets/Resources</code> folder.",
  "li_setup_2": "<strong>Configure Languages:</strong> In the <strong>Settings</strong> tab under <strong>Language Management</strong>, ensure your main language (e.g., <code>en</code> for English) is selected as the <strong>Source Language</strong>. Enable all languages you plan to support.",
  "li_setup_3": "<strong>Specify Content for Parsing:</strong> In the <strong>Content</strong> tab, add all scenes for analysis to the <strong>Scenes to Parse</strong> list. If you use prefabs with text, make sure their folders are added to <strong>Prefab Folders</strong>.",
  "li_setup_4": "<strong>First Parser Run:</strong> Go to the <strong>Actions</strong> tab and click the <code>Update Keys</code> button. The tool will scan your project, create translation files, and automatically add the necessary components (<code>LocalizedText</code>, <code>LocalizedAsset</code>, etc.) to game objects.",
  "h1_components": "Core Components (assigned automatically)",
  "warning_box_components": "<strong>Important Note:</strong> All components described below are added to game objects automatically during parsing (when you click the <code>Update Keys</code> button). You do not need to add them manually.",
  "p_components_intro": "These components are the \"bridge\" between your objects in the scene and the translation database. They \"listen\" for language changes and automatically substitute the correct text or asset.",
  "h2_localizedtext": "3.1. LocalizedText",
  "p_localizedtext_1": "The main component for displaying translated text. It is placed on objects with <code>Text</code>, <code>TMP_Text</code>, and <code>TextMesh</code>.",
  "li_localizedtext_1": "<code>localizationKey</code>: The key used to find the translation. Generated automatically.",
  "li_localizedtext_2": "<code>isStyleOnly</code>: If <code>true</code>, the component will only apply styles (font, RTL) but will not change the text itself. Useful for elements whose text is managed by another script (e.g., <code>LanguageSelector</code>).",
  "li_localizedtext_3": "<code>originalSourceText</code>: The original text in the base language. Used as a fallback.",
  "h2_localizedasset": "3.2. LocalizedAsset",
  "p_localizedasset_1": "Used to swap assets (<code>Sprite</code>, <code>AudioClip</code>, <code>Material</code>, etc.). It automatically detects the target component type on the object (<code>Image</code>, <code>AudioSource</code>) and replaces its resource.",
  "p_localizedasset_2": "For components with the <strong>Play on Awake</strong> option (like <code>AudioSource</code>, <code>VideoPlayer</code>), <code>LocalizedAsset</code> correctly intercepts the auto-play, swaps the asset, and then starts playback to avoid playing unlocalized content.",
  "h2_localizedprefab": "3.3. LocalizedPrefab",
  "p_localizedprefab_1": "A component for localizing entire prefabs. It works non-destructively: it does not modify the original prefab but creates an instance of the localized version as a child object, disabling all scripts (<code>MonoBehaviour</code>), renderers (<code>Renderer</code>), and colliders (<code>Collider</code>) on the original object. This prevents dual logic execution and visual artifacts. For correct runtime operation, its execution order is set to -100 (<code>[DefaultExecutionOrder(-100)]</code>) to ensure it runs before other scripts.",
  "h2_uitklocalization": "3.4. UITKLocalization",
  "p_uitklocalization_1": "Added to objects with a <code>UIDocument</code> and manages the localization of all text elements within the UI Toolkit document (UXML).",
  "h2_localizeddropdown": "3.5. LocalizedDropdown",
  "p_localizeddropdown_1": "Added to <code>Dropdown</code> and <code>TMP_Dropdown</code> to translate their options.",
  "h2_localizedbehaviour": "3.6. LocalizedBehaviour",
  "p_localizedbehaviour_1": "A utility component that allows your scripts to react to language changes. It automatically finds and calls methods marked with the <code>[OnLanguageChange]</code> attribute.",
  "h2_context_menu": "3.7. \"Analyze for Localization\" Context Menu",
  "p_context_menu_1": "To quickly add a <code>LocalizedAsset</code> to an object, you can right-click on the desired component (e.g., <code>Image</code>, <code>AudioSource</code>) in the inspector and select <strong>Analyze for Localization</strong>. The tool will add and configure the component itself. (This is optional but can be used for manual addition).",
  "h1_loc_tool_window": "\"Localization Tool\" Window",
  "h2_in_editor_preview": "4.1. In-Editor Preview",
  "p_preview_1": "Directly below the header is the <strong>Preview Language</strong> dropdown list. This powerful feature allows you to see how the localization will look in any language directly in the <strong>Scene</strong> window, without running the game.",
  "li_preview_1": "<strong>How it works:</strong> Select a language from the list, and the tool will instantly apply the corresponding translations, fonts, RTL settings, and assets to all localizable objects in the active scene.",
  "li_preview_2": "<strong>Placeholders:</strong> If a placeholder style (e.g., <strong>Accents</strong> or <strong>Brackets</strong>) is selected in the <strong>Settings</strong> tab, these placeholders will be displayed in preview mode instead of actual translations. This is ideal for testing layout and finding unlocalized elements.",
  "li_preview_3": "<strong>Safety:</strong> All changes made in preview mode are temporary. The tool will automatically revert everything to its original state when you select \"<strong>Revert to Original</strong>\", close the window, change scenes, or before saving a scene/prefab (thanks to the <code>LocalizationPreviewProtector</code> component).",
  "li_preview_4": "<strong>Crash Protection:</strong> The built-in <code>PreviewCrashProtector</code> system will automatically restore the original state of objects if the Unity editor crashes while a preview is active.",
  "h2_tab_settings": "4.2. \"Settings\" Tab",
  "p_settings_1": "Your control center. Here you define global rules for the entire localization process.",
  "li_settings_1": "<strong>Key Generation Mode:</strong> Choose how keys will be created.<ul><li><code>UseTextAsKey</code>: The text itself becomes the key. Ideal for prototypes. Downside: if you change the source text, the key changes, and all its translations will be lost.</li><li><code>AutoGenerateKeysOnly</code>: The key is generated based on the object's hierarchy and name. Reliable for production. Upside: translations do not break when the text is changed.</li><li><code>UseTextAsKeyWithCustomPriority</code> and <code>AutoGenerateWithCustomKeys</code>: Hybrid modes that allow you to set custom keys in code via the <code>[LocalizableField(\"my_custom_key\")]</code> attribute.</li><li><strong>Safe Migration:</strong> You can change the mode at any time. The tool will automatically migrate all existing translations to the new key system.</li></ul>",
  "li_settings_2": "<strong>Language Management:</strong> Configure the list of languages. For languages with special characters, assign the appropriate <strong>Font Asset</strong>. Enable the <strong>RTL</strong> option for right-to-left languages.",
  "li_settings_3": "<strong>General Settings:</strong><ul><li><code>Parse Prefabs</code>: Enables prefab parsing.</li><li><code>Split files by language</code>: Determines how to store translations (one large file or one file per language).</li><li><code>Translations Path</code>: The path for storing <code>.json</code> translation files. Important: the folder must be inside <code>Assets/StreamingAssets/</code>.</li></ul>",
  "li_settings_4": "<strong>Debugging & Testing:</strong><ul><li><code>Placeholder Style</code>: Choose the style for displaying placeholders in preview mode.</li></ul>",
  "li_settings_5": "<strong>Live Updates:</strong> Settings for loading translations from a remote server.",
  "li_settings_6": "<strong>Runtime API Key:</strong> A section for securely storing an API key that may be needed in the compiled game (stored in encrypted form).",
  "h2_tab_content": "4.3. \"Content\" Tab",
  "p_content_1": "Here you tell the tool where exactly to look for text.",
  "li_content_1": "<strong>Scenes to Parse:</strong> Drag and drop all scenes for analysis here.",
  "li_content_2": "<strong>Prefab Folders:</strong> Specify folders with prefabs.",
  "li_content_3": "<strong>Dynamic Texts:</strong> Enter strings that are created exclusively in code here (e.g., \"Game Over\").",
  "li_content_4": "<strong>Parsing Ignores:</strong> Specify scripts, components, or objects to ignore.",
  "li_content_5": "<strong>Pin:</strong> This feature allows you to \"pin\" an object from the scene to the ignore list. Instead of a temporary reference to the object, the tool will save its full path in the hierarchy, making the ignore persistent between sessions (but note that renaming the object or its parent will break this link).",
  "h2_tab_actions": "4.4. \"Actions\" Tab",
  "p_actions_1": "The main work tab.",
  "li_actions_1": "<strong>Update Keys:</strong> Runs the parser, which updates your translation files.",
  "li_actions_2": "<strong>Open Translation Editor:</strong> Opens a separate, more convenient window for editing all translations.",
  "li_actions_3": "<strong>Data Management:</strong> Use for exchanging data with translators (Export/Import to CSV/XML/YAML/XLIFF, import from Google Sheets).",
  "li_actions_4": "<strong>Auto-Translation:</strong> Automatically fills all empty translation strings. New settings allow you to manage the batch size (<strong>Batch Size</strong>) and retry policy (<strong>Retry Policy</strong>) for each service (DeepL, Google, Microsoft) separately. The tool tracks the number of translated characters and warns about potential limit overruns.",
  "li_actions_5": "<strong>Danger Zone:</strong> Contains buttons for completely removing all localization components from the project. Use with caution!",
  "h2_tab_assets": "4.5. \"Assets\" Tab",
  "p_assets_1": "This tab is entirely dedicated to localizing non-text resources.",
  "li_assets_1": "<strong>Create a folder structure (optional):</strong> In section <strong>2. Asset Folder Generation</strong>, click <strong>Create Asset Folders Now</strong>.",
  "li_assets_2": "<strong>Configure categories and naming rules:</strong> In section <strong>3. Asset Categories & Scanning</strong>, make sure the <strong>Naming Rule</strong> (<code>{key}_{lang}</code>) matches your files (e.g., <code>button_ok_en.png</code>).",
  "li_assets_3": "<strong>Place your assets:</strong> Put the localized assets in the folders.",
  "li_assets_4": "<strong>Scan assets:</strong> In section <strong>4. Automation</strong>, click <strong>Scan Assets & Update Tables</strong>. The cleanup process has become safer: now only old table files (<code>.asset</code>) are deleted, not the entire folder.",
  "li_assets_5": "<strong>Link assets to objects:</strong> Click <strong>Analyze Project & Attach Components</strong>.",
  "h2_tab_report": "4.6. \"Report\" Tab",
  "p_report_1": "After each parsing, this report shows the full picture of your localization status.",
  "li_report_1": "<strong>Categories:</strong> All Keys, Added, Updated (text changed), Removed, Duplicates, Migrated, Skipped (unchanged).",
  "li_report_2": "<strong>Advanced Find:</strong> Click the <strong>Find</strong> button next to any entry to instantly find the corresponding object in the project. The search works asynchronously, not blocking the editor, and searches across all scenes and prefabs. If a key is used in multiple places, a dropdown list with all sources will appear.",
  "h1_translation_editor": "Translation Table Editor",
  "p_editor_1": "Opens via <strong>Tools -> Localization -> Translation Table Editor</strong>. This is the main tool for manually editing translations.",
  "li_editor_1": "<strong>Smart Grouping:</strong> Keys for plurals and gender (e.g., <code>apple_count_one</code>, <code>apple_count_few</code>) are automatically combined into collapsible groups.",
  "li_editor_2": "<strong>Advanced Editing:</strong> Click on a cell to open the <strong>MultiLineEditWindow</strong> popup. It shows the source text for comparison, allows you to quickly copy it, and checks for placeholder mismatches (e.g., <code>{username}</code>) in real time, highlighting missing or extra ones.",
  "li_editor_3": "<strong>Placeholder Validation via Comments:</strong> You can explicitly specify which placeholders should be in the translation by adding a special directive to the key's comment, for example: <code>@placeholders: {username}, {score}</code>. The <strong>MultiLineEditWindow</strong> will use this list as the primary source of truth.",
  "li_editor_4": "<strong>Navigation and Management:</strong> Navigate the table with scrollbars or by holding the middle mouse button. Change column widths by dragging the separators. Save changes with <code>Ctrl+S</code>.",
  "li_editor_5": "<strong>Full Undo/Redo:</strong> The entire stack of actions (text changes, adding/deleting keys) is fully supported via <code>Ctrl+Z</code> / <code>Ctrl+Y</code>.",
  "li_editor_6": "<strong>Backups and Autosave:</strong> Use the <strong>Manage Backups</strong> button. The tool also automatically saves your session every few minutes. In case of a crash, you will be prompted to restore your changes.",
  "h1_usage_examples": "Usage Examples",
  "h2_example_components": "6.1. Ready-made Components and Examples",
  "p_example_components_1": "The project includes ready-to-use scripts that serve as excellent examples.",
  "li_example_components_1": "<strong><code>LanguageSelector.cs</code>:</strong> A ready-made component for creating a UI dropdown list for language switching. It automatically finds all available languages and manages their switching.<br><strong>How to use:</strong> Simply add the <code>LanguageSelector</code> component to your scene (e.g., on an empty GameObject) and specify your <code>TMP_Dropdown</code> in the inspector.",
  "li_example_components_2": "<strong>Code Examples:</strong> To learn advanced techniques such as working with <code>[LocalizableField]</code>, the <code>_()</code> function, plurals, and gender, study the <code>StatPurchaseTest.cs</code> and <code>TestLocalization.cs</code> files. They clearly demonstrate the implementation of all the main features of the tool in code.",
  "h2_example_attribute": "6.2. [LocalizableField] Attribute",
  "p_example_attribute_1": "The preferred method for texts that are part of a component's configuration in the inspector. The parser can now work with strings, lists/arrays of strings, and even fields within nested <code>[System.Serializable]</code> classes.",
  "code_example_attribute": "using Ankonoanko.Localization; // Required for [LocalizableField]\nusing UnityEngine;\nusing System.Collections.Generic;\npublic class QuestManager : MonoBehaviour\n{\n    // The parser will find this field and create a key for it\n    [LocalizableField]\n    private string defaultQuestFailedMessage = \"You have failed the quest.\";\n    \n    // You can set a custom key\n    [LocalizableField(\"custom_quest_start_dialog\")]\n    public string startDialog = \"Are you ready for an adventure?\";\n    \n    // Works with lists\n    [LocalizableField]\n    private List<string> missionObjectives = new List<string> { \"Find the treasure\" };\n    \n    // And even with nested classes!\n    [System.Serializable]\n    public class ItemInfo\n    {\n        [LocalizableField] public string Name;\n        [LocalizableField] public string Description;\n    }\n    \n    [LocalizableField]\n    private ItemInfo magicSword;\n}",
  "h2_example_function": "6.3. _() Function and [OnLanguageChange] Attribute",
  "p_example_function_1": "Use the <code>_()</code> function for dynamic text that changes during gameplay. The method that updates the UI should be marked with the <code>[OnLanguageChange]</code> attribute so that it is called automatically when the language is changed. A <code>LocalizedBehaviour</code> component will be automatically added to the object for this purpose.",
  "code_example_function": "// To use the short _() call, add these lines\nusing static Ankonoanko.Localization.LocalizationManager;\nusing Ankonoanko.Localization; // Required for [OnLanguageChange]\nusing UnityEngine;\nusing TMPro;\nusing System.Collections.Generic;\npublic class PlayerHUD : MonoBehaviour\n{\n    [SerializeField] private TMP_Text scoreText;\n    private int score = 100;\n    private string playerName = \"Alex\";\n    \n    void Start()\n    {\n        UpdateUI(); // Initial update\n    }\n    \n    // This method will be called automatically when the language changes\n    [OnLanguageChange]\n    void UpdateUI()\n    {\n        // 1. Indexed placeholders (like in string.Format)\n        // Key: \"score_label\", Text in file: \"Score: {0}\"\n        scoreText.text = _(\"score_label\", score); // Result: \"Score: 100\"\n        \n        // 2. Named placeholders (recommended for readability)\n        // Key: \"welcome_message\", Text: \"Welcome, {username}!\"\n        string welcomeText = _(\"welcome_message\", new { username = playerName });\n        \n        // For complex cases or high performance\n        var args = new Dictionary<string, object> { { \"username\", playerName } };\n        string welcomeText2 = _(\"welcome_message\", args);\n    }\n}",
  "h2_example_plurals": "6.4. Plurals and Gender",
  "p_example_plurals_1": "The tool now uses more accurate rules for different language groups.",
  "code_example_plurals": "using static Ankonoanko.Localization.LocalizationManager;\nusing Ankonoanko.Localization;\nusing UnityEngine;\npublic class ItemCounter : MonoBehaviour\n{\n    void DisplayItemCount(int count)\n    {\n        // Keys: \"apple_count_one\", \"apple_count_few\", \"apple_count_many\"\n        // Texts: \"{0} apple\", \"{0} apples\", \"{0} apples\"\n        string appleText = _(\"apple_count\", count); \n        Debug.Log(appleText); // Automatically selects the correct form\n    }\n    \n    void GreetUser(Gender userGender)\n    {\n        // Keys: \"user_greeted_male\", \"user_greeted_female\"\n        // Texts: \"He has arrived.\", \"She has arrived.\"\n        string greeting = _(\"user_greeted\", userGender);\n        Debug.Log(greeting);\n    }\n}",
  "h1_important_notes": "Important Notes and Warnings",
  "li_notes_1": "<strong>Backups:</strong> Before global operations (<code>Update Keys</code>, data import), always create a backup via <strong>Translation Table Editor -> Manage Backups</strong>.",
  "li_notes_2": "<strong>API Key Security:</strong> The key for working in the editor is stored locally on your machine (in <code>EditorPrefs</code>) and does not get into the repository. For keys needed in the game build, use the <strong>Runtime API Key</strong> section.",
  "li_notes_3": "<strong><code>StreamingAssets</code> Folder:</strong> Translation files must be in a subfolder of <code>Assets/StreamingAssets/</code> to be included in the game build.",
  "li_notes_4": "<strong>\"Fool-proofing\":</strong> The tool automatically protects you from accidentally saving temporary data from preview mode into a scene or prefab.",
  "li_notes_5": "<strong>Performance:</strong> The <code>_()</code> call is fast, but in loops that run every frame (e.g., in <code>Update</code>), try to cache the result in a variable.",
  "li_notes_6": "<strong>Excluding <code>LanguageSelector</code> from parsing:</strong> The object with the <code>LanguageSelector</code> component and its <code>TMP_Dropdown</code> must be added to the <strong>Ignore Specific Objects</strong> list in the <strong>Content</strong> tab. This is necessary to prevent the parser from creating extra keys for the dropdown options, as the <code>LanguageSelector</code> script populates them dynamically at runtime. Ignoring prevents conflicts and keeps the translation files clean.",
  "li_notes_7": "<strong>Fonts for <code>LanguageSelector</code>:</strong> For the selected language in the <code>TMP_Dropdown</code> to correctly update its font, manually add an empty <code>LocalizedText</code> component to the child <strong>Label</strong> object of the Dropdown and check the <code>isStyleOnly</code> box.",
  "h1_extending": "Extending Functionality",
  "h2_custom_parser": "8.1. Creating a Custom Parser",
  "p_custom_parser_1": "You can easily extend the system to support custom components by creating your own parser class.",
  "li_custom_parser_1": "Create a new C# script in the <strong>Editor</strong> folder of your project.",
  "li_custom_parser_2": "Copy the template below into it.",
  "li_custom_parser_3": "Modify the logic to match your component.",
  "code_custom_parser": "#if UNITY_EDITOR\nusing System.Collections.Generic;\nusing UnityEngine;\nusing Ankonoanko.Localization;\n\n// TEMPLATE for creating a parser for a custom component.\npublic class CustomComponentParser_Template : ITextComponentParser\n{\n    public IEnumerable<(string text, string key, string source)> Parse(\n        GameObject gameObject,\n        LocalizationSettings settings)\n    {\n        // 1. Check if the object has the custom component we need.\n        var component = gameObject.GetComponent<AwesomeComponentFromAssetStore>();\n        if (component == null)\n        {\n            yield break; // Exit if the component is not found\n        }\n        \n        // 2. Get the text from the custom component's fields.\n        string titleText = component.Title;\n        \n        // 3. Check if the text is valid for localization.\n        if (TextParser.IsValidLocalizableText(titleText))\n        {\n            // 4. Generate the key and source using helpers from TextParser.\n            string key = TextParser.GenerateKeyForObject(gameObject, titleText, settings.keyGenerationMode);\n            string source = TextParser.GetSourceStringForObject(gameObject);\n            \n            // 5. Return the result.\n            yield return (titleText, key, source);\n        }\n        \n        // 6. Repeat for other fields...\n        // (a suffix can be added to make keys unique)\n        string descriptionText = component.Description;\n        if (TextParser.IsValidLocalizableText(descriptionText))\n        {\n            string key = TextParser.GenerateKeyForObject(gameObject, descriptionText, settings.keyGenerationMode) + \"_description\";\n            string source = TextParser.GetSourceStringForObject(gameObject);\n            yield return (descriptionText, key, source);\n        }\n    }\n}\n#endif",
  "h1_faq": "FAQ & Troubleshooting",
  "h2_faq_installation": "9.1. Installation & Quick Start",
  "q_faq_installation_1": "What happens if my project already has the com.unity.nuget.newtonsoft-json package from another asset? Will the dependency installer try to update or ignore it?",
  "a_faq_installation_1": "The installer checks for the existence of the Newtonsoft.Json.JsonConvert type. If the type exists, it considers the dependency satisfied and will not attempt to install or update the package. This is done to prevent version conflicts.",
  "q_faq_installation_2": "I accidentally clicked \"Skip for Now\" and checked \"Don't ask again\" for optional dependencies (e.g., for CSV support). How can I bring up the installer window again to install them?",
  "a_faq_installation_2": "You can manually trigger a dependency check at any time via the Tools -> Localization -> Check Dependencies menu. This will reset the \"Don't ask again\" flag and show the window with all missing optional packages again.",
  "q_faq_installation_3": "The tool did not create LocalizationSettings.asset in Assets/Resources. Why might this have happened, and can I create it manually via the Assets -> Create menu?",
  "a_faq_installation_3": "This can happen if you do not have an Assets/Resources folder. The tool will try to create it, but file system permissions might prevent it. Yes, you can create the asset manually: right-click in the Resources folder, select Create -> Localization -> Settings. The tool will find it automatically.",
  "q_faq_installation_4": "Can I move the LocalizationSettings.asset file to another Resources folder, for example, Assets/MyGame/Resources? Will the tool still find it?",
  "a_faq_installation_4": "Yes. The tool uses Resources.Load(), which searches for an asset by name in all folders named Resources in your project. The important thing is that the file keeps its name LocalizationSettings.asset.",
  "q_faq_installation_5": "The dependency installer froze or gave an error. Can I install the dependencies (Newtonsoft Json, Editor Coroutines) manually through the Unity Package Manager?",
  "a_faq_installation_5": "Yes. You can open Window -> Package Manager, click the \"+\" icon, and select \"Add package by name...\". Enter the package names: com.unity.nuget.newtonsoft-json and com.unity.editorcoroutines.",
  "h2_faq_components": "9.2. Core Components",
  "q_faq_components_1": "The LocalizedPrefab component disables MonoBehaviours on the original object. What if the original object has a script that creates other objects or subscribes to events in Awake()? Will this code be executed?",
  "a_faq_components_1": "No, it will not. Disabling a MonoBehaviour prevents all of Unity's \"magic\" methods from being called, including Awake(), OnEnable(), and Start(). This is intentional to avoid duplicate logic execution. All initialization should occur in scripts on the localized versions of the prefab.",
  "q_faq_components_2": "If the original prefab (LocalizedPrefab) has a Rigidbody or another physics component, will it be disabled? Will this affect physics if the localized prefab does not have it?",
  "a_faq_components_2": "Yes, the physics behavior of the original object will be neutralized. The LocalizedPrefab component finds all Rigidbody and Rigidbody2D components on its GameObject and sets their isKinematic property to true. This effectively removes them from dynamic physics calculations, preventing unwanted behavior like an invisible object falling or reacting to collisions. It is still recommended that the localized version of the prefab contains all the necessary physics components for correct behavior.",
  "q_faq_components_3": "The LocalizedAsset component stores the target component name as a string (_targetComponentTypeName). What happens if I rename a custom component script or move it to another assembly (Assembly Definition)? Will LocalizedAsset stop working for it?",
  "a_faq_components_3": "Yes, it will stop working. The component stores the full type name, including the namespace and assembly. Renaming the script or moving it to another .asmdef will change this name, and LocalizedAsset will not be able to find the target component. You will need to run another analysis via Analyze Project & Attach Components for it to update the name.",
  "q_faq_components_4": "If there are two Image components on the same GameObject, how does LocalizedAsset know which one to localize? Will it work with both or only the first one it finds?",
  "a_faq_components_4": "A LocalizedAsset is created for a specific component instance. It holds a reference to that component in code. If you manually add a second LocalizedAsset and use the \"Analyze for Localization\" context menu to target the second Image, you will have two LocalizedAsset components, each managing its own Image. The automatic analyzer will only create a component for the first Image with a localizable asset it finds.",
  "q_faq_components_5": "The documentation states that LocalizedPrefab has an execution order of -100. What if I have another script with an execution order of -110 that tries to find a child object created by LocalizedPrefab in its Awake()? Will LocalizedPrefab have instantiated its instance in time?",
  "a_faq_components_5": "Yes, it will. LocalizedPrefab creates the instance of the localized prefab in its OnEnable() method. Unity's execution order guarantees that all Awake() methods are executed before all OnEnable() methods. Thus, your script with order -110 will execute its Awake(), then LocalizedPrefab with order -100 will execute its Awake(), and only after that will their OnEnable() methods be called in order. Your script will not find the object because it will not have been created yet.",
  "q_faq_components_6": "The LocalizedText component has an isStyleOnly option. If I enable it and then call myLocalizedText.SetFormattedText(\"new_key\") in code, will the text change, or only the style (font/RTL)?",
  "a_faq_components_6": "Both the key and the text will change. Calling SetFormattedText programmatically overrides the isStyleOnly behavior for that specific update. The isStyleOnly option is intended to prevent the component from reacting to global language changes, but it will always react to a direct key change through code.",
  "q_faq_components_7": "LocalizedBehaviour automatically finds methods with the [OnLanguageChange] attribute. Will it find private and protected methods, or must they be public?",
  "a_faq_components_7": "It will find methods with any access modifier (public, private, protected, internal). Reflection in Unity allows for the discovery of all instance methods regardless of their access level.",
  "q_faq_components_8": "The LocalizedAsset component intercepts Play on Awake. What happens if another script on the same object tries to access the asset (e.g., audioSource.clip.length) in Awake() or Start() before LocalizedAsset has swapped it? Is a NullReferenceException or usage of the old asset possible?",
  "a_faq_components_8": "Usage of the old (unlocalized) asset is possible. LocalizedAsset performs the swap in its OnEnable(). The Awake() methods of all scripts are executed before OnEnable(). If your script accesses audioSource.clip in Awake(), it will get the original clip. If it accesses it in Start(), the result will depend on the script execution order. To guarantee access to the localized asset, either set a later execution order for your script or access the asset in a method marked with [OnLanguageChange].",
  "h2_faq_window": "9.3. \"Localization Tool\" Window",
  "h3_faq_window_preview": "In-Editor Preview",
  "q_faq_window_preview_1": "I opened a prefab in Prefab Mode, applied the In-Editor Preview, and pressed Ctrl+S. Will the temporary preview data be saved to the prefab asset? How does LocalizationPreviewProtector handle this case?",
  "a_faq_window_preview_1": "No, it will not be saved. LocalizationPreviewProtector intercepts the asset saving event (OnWillSaveAssets) and automatically calls RevertEditorPreview() before Unity writes the changes to disk. Thus, the prefab will be saved in its original, unlocalized state.",
  "q_faq_window_preview_2": "If I enable In-Editor Preview and the Unity editor crashes, and the Temp/localization_preview_recovery.json file gets corrupted (e.g., empty or invalid JSON), what will happen on the next launch?",
  "a_faq_window_preview_2": "PreviewCrashProtector is wrapped in a try-catch block. If JSON deserialization fails, an error will be logged to the console about the inability to recover, and the process will terminate quietly. Your scene will remain in the \"broken\" state it was in at the time of the crash. In this case, you will need to manually select \"Revert to Original\" in the tool window to force a rollback of the changes.",
  "q_faq_window_preview_3": "In In-Editor Preview mode for LocalizedPrefab, a temporary instance is created. Will the Awake() and Start() methods be executed on this instance? Could this cause errors if they are not designed to run in Edit Mode?",
  "a_faq_window_preview_3": "Yes, they will. PrefabUtility.InstantiatePrefab in Edit Mode calls Awake() and OnEnable(). If these methods contain logic that should not run in the editor (e.g., accessing singletons that only exist in Play Mode), it could cause errors. It is recommended to use if (Application.isPlaying) or #if UNITY_EDITOR to protect such code.",
  "h3_faq_window_settings": "\"Settings\" Tab",
  "q_faq_window_settings_1": "I can change the Key Generation Mode from UseTextAsKey to AutoGenerateKeysOnly mid-project. What exactly will happen to my existing translations? Will they be mapped to the new keys?",
  "a_faq_window_settings_1": "Yes, they will. When changing the mode, the tool performs a \"safe migration\": it re-parses the entire project, creates new keys according to the new rules, but maps the old and new keys through the original text. It then transfers all your existing translations and comments from the old keys to the new ones. Your translations will not be lost.",
  "q_faq_window_settings_2": "If I add a language with a code that has no pluralization rules (e.g., \"kz\" for Kazakh) to the Supported Languages list, which rule will be used by default?",
  "a_faq_window_settings_2": "The DefaultPluralRule will be used, which is suitable for English and most European languages (forms for \"one\" and \"other\").",
  "q_faq_window_settings_3": "What if I specify the Translations Path not in StreamingAssets, but in a regular folder like Assets/MyTranslations? Will the json files be included in the game build?",
  "a_faq_window_settings_3": "No, they will not. Only assets located in a StreamingAssets or Resources folder are guaranteed to be included in the build. If you specify a different path, localization will work in the editor but will not work in the compiled game, as the translation files will not be part of the build.",
  "q_faq_window_settings_4": "The auto-translation API key is stored in EditorPrefs. If I am working on the project on two different computers, do I need to enter the key on each machine separately?",
  "a_faq_window_settings_4": "Yes. EditorPrefs is local storage for each computer. You will need to enter the API key on each machine from which you plan to use the auto-translate feature.",
  "h3_faq_window_content": "\"Content\" Tab",
  "q_faq_window_content_1": "What if I add a scene to Scenes to Parse that is not included in the Build Settings? Will this affect anything other than the parsing process itself?",
  "a_faq_window_content_1": "No, it will not. The Scenes to Parse list is used exclusively to let the tool know which scenes to open and analyze for text. It is in no way related to the scenes that will end up in the final build of your game.",
  "q_faq_window_content_2": "I added an object to Ignore Specific Objects (the temporary list). If I make a prefab out of this object, will the instance of this prefab also be ignored?",
  "a_faq_window_content_2": "No, it will not. The temporary list stores a direct reference to the object in the scene. When you create a prefab, it is a new asset. Its instances are different objects, and the ignore rule will not apply to them. To permanently ignore prefabs, they must be added to the ignore list as a prefab asset.",
  "q_faq_window_content_3": "If I add the TMPro.TMP_Text component to Parsing Ignores -> Ignore Component Types, but there is an object in the scene with a LocalizedText that already references this TMP_Text, what will happen on the next Update Keys? Will the key be deleted?",
  "a_faq_window_content_3": "Yes, it will. When you click Update Keys, the parser rescans the entire project. It will see that the TMPro.TMP_Text type should be ignored and will not generate a key for it. During the process of comparing old and new keys, it will determine that the old key is no longer used and will mark it as \"Removed\".",
  "q_faq_window_content_4": "The documentation says that \"Pin\" saves the full path to the object and will break if it is renamed. What if I make a prefab from the object and then rename the original object — will \"Pin\" continue to work for the prefab instances?",
  "a_faq_window_content_4": "No, it will not. \"Pin\" saves the absolute path in the scene hierarchy at the moment the button is clicked (e.g., Canvas/Panel/Button). This path is not related to prefab logic. Prefab instances will have the same path, but if you rename the parent object in the scene, \"Pin\" will stop working for both the original and the instances.",
  "q_faq_window_content_5": "If I use \"Pin\" for a child object inside a prefab instance, what path will be saved: relative to the prefab root or the scene root? Will it work in other scenes?",
  "a_faq_window_content_5": "The full path from the scene root will be saved. For example, MyPrefab(Clone)/Content/Icon. This \"pinned\" path will only work in the scene where you created it. In other scenes, such a path is unlikely to be found.",
  "h3_faq_window_actions": "\"Actions\" Tab",
  "h3_faq_window_assets": "\"Assets\" Tab",
  "h3_faq_window_report": "\"Report\" Tab",
  "h2_faq_editor": "9.4. Translation Editor",
  "h2_faq_examples": "9.5. Usage Examples & Code",
  "h2_faq_notes": "9.6. Important Nuances & Warnings",
  "h2_faq_extending": "9.7. Extending Functionality",
  "q_faq_window_actions_1": "What happens if the internet connection is lost during a batch auto-translation? Will the tool retry the failed batch according to the Retry Policy, or will the process be completely interrupted?",
  "a_faq_window_actions_1": "The tool will attempt to resend the exact batch that failed, according to the Retry Policy settings (number of attempts and delay). If all attempts for this batch fail, the translation process for the current language will be interrupted, and an error will be logged to the console. Translation for the next languages in the queue will not start.",
  "q_faq_window_actions_2": "If I import a CSV file that contains keys that already exist in the project but with empty values for some languages, will these empty values replace my existing translations or be ignored?",
  "a_faq_window_actions_2": "Empty values will replace existing translations. The import process considers the CSV file as the \"source of truth\". If the value for the key welcome_message in the ru column is empty, the current Russian translation for this key will be overwritten.",
  "q_faq_window_actions_3": "The \"Danger Zone\" section allows deleting all components. Will it remove components from prefabs that are in folders not specified in the Prefab Folders on the Content tab?",
  "a_faq_window_actions_3": "Yes, it will. The functions in the \"Danger Zone\" scan all prefabs in the project (AssetDatabase.FindAssets(\"t:Prefab\")), not just those specified in the parsing list, to ensure the most complete cleanup possible.",
  "q_faq_window_actions_4": "When importing from Google Sheets, how should I format the comments column for placeholder validation using the @placeholders: directive to work?",
  "a_faq_window_actions_4": "In your Google Sheets document, the column must be titled \"Developer Notes\". In the cells of this column, you can write comments as usual. To specify placeholders, simply add a line like @placeholders: {username}, {score} in the comment text. The tool will automatically recognize this directive upon import.",
  "q_faq_window_actions_5": "Can the tool import data from multiple sheets of a single Google Sheets document, or does it only work with one sheet per GID?",
  "a_faq_window_actions_5": "The tool only works with one sheet at a time. The import URL includes a gid=... parameter, which uniquely identifies a specific sheet in the document. To import data from another sheet, you need to copy its URL (with a different gid) and perform the import again.",
  "q_faq_window_assets_1": "What if I have two assets with the same key but different types in the same scan folder (e.g., sound_effect_en.mp3 and sound_effect_en.wav)? Which one will end up in the asset table?",
  "a_faq_window_assets_1": "The asset scanner loads them specifying the expected type (AssetDatabase.LoadAssetAtPath(path, expectedType)). For the AudioClip category, it will only search for and load files that Unity recognizes as AudioClips. If both files are valid audio clips, the one that is processed last will be included in the table, effectively overwriting the previous one. It is recommended to avoid such duplicates.",
  "q_faq_window_assets_2": "If I click Scan Assets & Analyze Project, and there is an Image object in the scene for which a localized sprite already exists, but the Image object itself does not yet have a LocalizedAsset component, will the tool add the component and automatically insert the key?",
  "a_faq_window_assets_2": "Yes, that is exactly how it works. \"Analyze Project\" finds the Image component, looks at the name of the sprite assigned to it (e.g., icon_play_en), extracts the key (icon_play) and language (en) from it, and then adds a LocalizedAsset component to that GameObject and writes the key icon_play into it.",
  "q_faq_window_assets_3": "Can I use the same Naming Rule for different asset categories if they have different Scan Folders? Will this cause conflicts?",
  "a_faq_window_assets_3": "Yes, you can. There will be no conflicts, as a separate asset table (LocalizedAssetTable) is created for each category. Keys from the \"Sprites\" category do not overlap with keys from the \"AudioClips\" category, even if they are named the same.",
  "q_faq_window_assets_4": "If a localizable asset (e.g., button_ok_en.png) is not in the root of the Scan Folder, but in a subfolder, will the scanner find it?",
  "a_faq_window_assets_4": "Yes, it will. The scanner uses the SearchOption.AllDirectories option, which means it will recursively check all subfolders within the Scan Folder you specify.",
  "q_faq_window_report_1": "The \"Find\" button searches for the object asynchronously. What if I start a search and then immediately click Update Keys? Will the search be interrupted?",
  "a_faq_window_report_1": "Yes, it will be interrupted. Any new action that requires UI blocking (like Update Keys) will stop the current search coroutine. A dialog box will appear, prompting you to stop the current search to start a new one.",
  "q_faq_window_report_2": "If a key is used in multiple places (e.g., on two different buttons in different scenes), how will this be displayed in the report under the \"Duplicates\" category?",
  "a_faq_window_report_2": "The \"Duplicates\" category will show all sources for that key. You will see one entry for the key, and the \"Source\" field will list all paths (in scene 1 and scene 2). The \"Find\" button in this case will open a dropdown list, allowing you to choose which object to navigate to.",
  "q_faq_window_report_3": "If I click \"Find\" for a key that is only used in code (via the _() function), what will happen? Will the tool be able to find and highlight the C# script?",
  "a_faq_window_report_3": "Yes. The search system is specifically trained to recognize sources like script MyScript.cs. When you click \"Find\", it will search for the MyScript.cs asset in the project and highlight (ping) it in the Project window.",
  "q_faq_editor_1": "What has higher priority for placeholder validation: the @placeholders: directive in the comment or the placeholders found in the source language text? For example, if the source text has {name} and the comment says @placeholders: {username}.",
  "a_faq_editor_1": "The @placeholders: directive in the comment has priority. It is considered an explicit instruction from the developer and the \"source of truth\". In your example, the editor will require {username} in the translation and will ignore {name} from the source text.",
  "q_faq_editor_2": "If I make a typo in the directive (e.g., @placeholder: instead of @placeholders:), will it be ignored or will the tool issue a warning?",
  "a_faq_editor_2": "It will simply be ignored. The tool looks for an exact match of @placeholders:. If the directive is misspelled, it will be treated as part of a regular comment, and validation will work the old way - based on the placeholders from the source text.",
  "q_faq_editor_3": "The autosave system creates files in the Backups/AutoSaves folder. Will these files be automatically deleted after a successful manual save or closing the window?",
  "a_faq_editor_3": "Yes. Upon a successful manual save or normal window closure (when you save changes), all autosave files are deleted to avoid prompting for recovery on the next launch. They only remain in case of an editor crash.",
  "q_faq_editor_4": "If I change the column widths in the editor, will these settings be saved between Unity sessions?",
  "a_faq_editor_4": "Yes. Column widths are saved to EditorPrefs each time you close the translation editor window and will be restored the next time you open it.",
  "q_faq_editor_5": "Does the text editing popup window (MultiLineEditWindow) support its own Undo/Redo stack (via Ctrl+Z) for changes made within it?",
  "a_faq_editor_5": "Yes. The MultiLineEditWindow has its own temporary Undo/Redo stack that works while the window is open. This allows you to undo and redo text changes within that window. Once you save the result (by closing the window), this change is recorded as a single action in the global Undo/Redo stack of the main editor.",
  "q_faq_examples_1": "What happens if the property names in the anonymous type passed to the _() function do not match the placeholders in the string? For example, _(\"Hello, {username}\", new { user_name = \"Bob\" }). Will there be an error, or will the placeholder simply not be replaced?",
  "a_faq_examples_1": "There will be no error. The {username} placeholder will simply not be replaced, and you will get the string \"Hello, {username}\" as a result. Replacement only occurs with an exact name match.",
  "q_faq_examples_2": "The [LocalizableField] attribute works for private fields. Will it work for static fields?",
  "a_faq_examples_2": "Yes, it will. The parser uses reflection to find fields with the flags BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static, so it will find and process static fields.",
  "q_faq_examples_3": "If I put the [OnLanguageChange] attribute on a method with parameters (e.g., void UpdateUI(string newLang)), what will happen? Will there be a compile error or a runtime warning?",
  "a_faq_examples_3": "There will be no compile error, but a warning from LocalizedBehaviour will appear in the Unity console at runtime. It will report that it found a method with the attribute but ignored it because the method has parameters. Such a method will not be called.",
  "q_faq_examples_4": "I am using _(\"apple_count\", count). If there is no key apple_count_one for the current language (for count = 1), which form will the system choose? Will it use apple_count_other as a fallback?",
  "a_faq_examples_4": "Yes. If a specific form (_one, _few, etc.) is not found, the system will try to use the key with the _other suffix as a fallback. If that is also not found, the translation for the base key apple_count will be used.",
  "q_faq_examples_5": "The function _(\"key\", new { username = \"Alex\" }) uses an anonymous type. Won't this create an excessive \"load\" on the garbage collector (GC) with frequent calls in an Update() method compared to passing a pre-created Dictionary<string, object>?",
  "a_faq_examples_5": "Yes, it will. Each call to new { ... } allocates memory on the managed heap, which creates extra work for the garbage collector. For text that is updated every frame (in Update or LateUpdate), it is significantly more performant to create a Dictionary<string, object> once in Start(), and only update its values in Update() before passing it to the _() function.",
  "q_faq_notes_1": "The documentation recommends adding LanguageSelector to the ignore list. What exactly will break if I forget to do this? Will extra keys be created for \"Option A, Option B\"?",
  "a_faq_notes_1": "Yes. If you don't add LanguageSelector to the ignore list, the parser will treat its TMP_Dropdown as a regular dropdown. It will find the default \"Option A, Option B, Option C\" that Unity creates and add keys for them to your translation files. This will clutter your files with unnecessary keys, as LanguageSelector will remove these options at runtime and create its own anyway.",
  "q_faq_notes_2": "If I forget to add an empty LocalizedText with the isStyleOnly checkbox enabled on the Label inside the TMP_Dropdown used by LanguageSelector, will the font not change? Why is this necessary?",
  "a_faq_notes_2": "Yes, the font will not change. This is necessary because LanguageSelector directly changes the label.text property. Without a LocalizedText on this object, the localization system does not know that this element needs styles (font, RTL) applied when the language changes. An empty LocalizedText with isStyleOnly serves as a \"marker\" for the system, saying: \"Watch this object and apply styles to it, but don't touch its text\".",
  "q_faq_notes_3": "Calling _() in the Update() method is not recommended. But what if I need to update text every frame (e.g., a timer)? What is the most performant way to do this, caching only the format string?",
  "a_faq_notes_3": "The most performant approach is to cache the format string in Start() or in an [OnLanguageChange] method, and use regular string.Format in Update(). Example: private string timerFormat; [OnLanguageChange] void UpdateTimerFormat() { timerFormat = _(\"timer_format\"); } void Update() { myTextComponent.text = string.Format(timerFormat, timeLeft); } This avoids looking up the key in the dictionary every frame, which is significantly faster.",
  "q_faq_extending_1": "Will my custom parser be called automatically after every Update Keys? Do I need to register it somewhere, or is it enough to just have a class that implements ITextComponentParser in the project?",
  "a_faq_extending_1": "Just having the class is enough. When TextParser runs, it uses reflection to find all classes in the project that implement the ITextComponentParser interface and automatically calls their Parse() method for each GameObject. No manual registration is required.",
  "q_faq_extending_2": "What if an exception occurs in my custom parser? Will it interrupt the entire parsing process, or will the tool safely continue with other parsers?",
  "a_faq_extending_2": "An exception in your custom parser will interrupt the process. The main parsing loop does not wrap calls to custom parsers in a try-catch block. If your Parse() method throws an unhandled exception,",
  "toggle_notes_title": "Toggle Notes",
  "mindmap_toggle_title": "Show Mind Map",
  "on_this_page_title": "On This Page",
  "my_notes_title": "My Notes",
  "no_notes_message_new": "Hover over the text to add a note.",
  "notes_add_title": "Add a note to this block",
  "notes_placeholder": "Your note...",
  "notes_close_title": "Close",
  "notes_goto_title": "Go to text",
  "notes_edit_title": "Edit note",
  "notes_delete_title": "Delete note",
  "notes_edit_text": "Edit"
}

